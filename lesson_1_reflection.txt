How did viewing a diff between two versions of a file help you see the bug that was introduced?
    You could see all the changes, and therefore and changes that were errors.

How could having easy access to the entire history of a file make you a more efficient programmer in the long term?
    Any errors can be found and changed quickly.

What do you think are the pros and cons of manually choosing when to create a  commit, like you do in Git, vs having versions automatically saved, like Google docs does?
    Pro: You can make many small changes to try code without having each part saved; there won't be hundreds of versions to go back to. You can choose to save when it makes sense to do so, rather than at an arbitrary point in the when you may save half-way through a line, for example. Con: Because versions are saved infrequently, you don't have the fine detail saved in version control. You may forget to save frequently enough, or you may save too often.

Why do you think some version control systems, like Git, allow saving multiple files in one commit, while others, like Google Docs, treat each file separately?
    Because in coding often the files link to one another, so changes in one may require changes in another.

How can you use the commands git log and git diff to view the history of files?
    log displays all the commits made, and diff can show the difference between two commits.

How might using version control make you more confident to make changes that could break something?
    Absolute confidence that you can always revert back to a working version.

Now that you have your workspace set up, what do you want to try using Git for?
    Keeping track of all my coding, as a portfolio and learning reference. 